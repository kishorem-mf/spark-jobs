package com.unilever.ohub.spark.api


import org.apache.spark.sql.functions._

object SifuApiUtils {

  object COUNTRIES extends Enumeration {
    type COUNTRIES = Value
    val AD,AE,AF,AG,AI,AL,AM,AO,AQ,AR,AS,AT,AU,AW,AX,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BL,BM,BN,BO,BQ,
    BR,BS,BT,BV,BW,BY,BZ,CA,CC,CD,CF,CG,CH,CI,CK,CL,CM,CN,CO,CR,CU,CV,CW,CX,CY,CZ,DE,DJ,DK,DM,DO,
    DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FK,FM,FO,FR,GA,GB,GD,GE,GF,GG,GH,GI,GL,GM,GN,GP,GQ,GR,GS,GT,GU,
    GW,GY,HK,HM,HN,HR,HT,HU,ID,IE,IL,IM,IN,IO,IQ,IR,IS,IT,JE,JM,JO,JP,KE,KG,KH,KI,KM,KN,KP,KR,KW,
    KY,KZ,LA,LB,LC,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MF,MG,MH,MK,ML,MM,MN,MO,MP,MQ,MR,MS,MT,MU,
    MV,MW,MX,MY,MZ,NA,NC,NE,NF,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PF,PG,PH,PK,PL,PM,PN,PR,PS,PT,PW,
    PY,QA,RE,RO,RS,RU,RW,SA,SB,SC,SD,SE,SG,SH,SI,SJ,SK,SL,SM,SN,SO,SR,SS,ST,SV,SX,SY,SZ,TC,TD,TF,
    TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,UM,US,UY,UZ,VA,VC,VE,VG,VI,VN,VU,WF,WS,YE,YT,ZA,ZM,ZW = Value
  }

  import COUNTRIES._

  val countryLanguageMap = Map(
    AE -> List("ar","en"),
    AR -> List("es"),
    AT -> List("de","en","fr"),
    AU -> List("de","en","zh"),
    AZ -> List("tr"),
    BE -> List("de","en","fr","nl"),
    BG -> List("bg"),
    BH -> List("ar","en"),
    BR -> List("fi","pt"),
    CA -> List("en","fr"),
    CH -> List("de","fr","it"),
    CL -> List("es"),
    CN -> List("de","en","es","fi","he","pt","tr","zh"),
    CO -> List("es"),
    CR -> List("es"),
    CX -> List("en"),
    CZ -> List("cs"),
    DE -> List("de","en","fr"),
    DK -> List("da","fi"),
    EE -> List("et"),
    EG -> List("ar","en"),
    ES -> List("de","es"),
    FI -> List("fi"),
    FR -> List("de","fr"),
    GB -> List("en"),
    GR -> List("el"),
    GT -> List("es"),
    HK -> List("en","zh"),
    HN -> List("es"),
    HR -> List("hr"),
    HU -> List("hu"),
    ID -> List("en","id"),
    IE -> List("de","en"),
    IL -> List("he"),
    IN -> List("en"),
    IT -> List("it"),
    JO -> List("ar","en"),
    KR -> List("en","ko"),
    KW -> List("ar","en"),
    LB -> List("ar","en"),
    LK -> List("en"),
    LT -> List("et","lt","lv"),
    LV -> List("lv"),
    MM -> List("en","my"),
    MV -> List("en"),
    MX -> List("de","en","es"),
    MY -> List("en","ms"),
    NL -> List("de","en","nl"),
    NO -> List("no"),
    NZ -> List("en"),
    OM -> List("ar","en"),
    PA -> List("es"),
    PH -> List("en","tl"),
    PK -> List("en","ur"),
    PL -> List("en","pl"),
    PT -> List("de","pt"),
    QA -> List("ar","en"),
    RO -> List("ro"),
    RU -> List("ru"),
    SA -> List("ar","de","en"),
    SE -> List("de","fi","no","se","sv"),
    SG -> List("en","zh"),
    SI -> List("sl"),
    SK -> List("sk"),
    SV -> List("es"),
    TH -> List("en","th"),
    TR -> List("en","tr"),
    TW -> List("de","en","zh"),
    UA -> List("ru"),
    US -> List("de","en","es","fi","nl","pt","tr","zh"),
    UY -> List("es"),
    VN -> List("en","vi"),
    ZA -> List("en","za")
  )

  val sifuToOhubFieldsMap = Map(
    col("additives") -> col("additives"),
    col("allergens") -> col("allergens"),
    col("availabilityHint") -> col("availabilityHint"),
    col("available") -> col("isAvailable"),
    col("benefits") -> col("benefits"),
    col("brandCode") -> col("brandCode"),
    col("brandName") -> col("brandName"),
    col("categoryCode") -> col("categoryCodeByMarketeer"),
    col("categoryName") -> col("categoryByMarketeer"),
    col("code") -> col("code"),
    col("containerCode") -> col("containerCode"),
    col("containerName") -> col("containerName"),
    col("country") -> col("countryCode"),
    col("cuAvailable") -> col("hasConsumerUnit"),
    col("cuEanCode") -> col("eanConsumerUnit"),
    col("cuLoyaltyPoints") -> col("consumerUnitLoyaltyPoints"),
    col("cuPriceInCents") -> col("consumerUnitPriceInCents"),
    col("defaultPackagingType") -> col("defaultPackagingType"),
    col("description") -> col("description"),
    col("dietetics") -> col("dietetics"),
    col("duAvailable") -> col("hasDistributionUnit"),
    col("duEanCode") -> col("eanDistributionUnit"),
    col("duLoyaltyPoints") -> col("distributionUnitLoyaltyPoints"),
    col("duOnlyProduct") -> col("isDistributionUnitOnlyProduct"),
    col("duPriceInCents") -> col("distributionUnitPriceInCents"),
    col("image1Id") -> col("imageId"),
    col("ingredients") -> col("ingredients"),
    col("isUnileverProduct") -> col("isUnileverProduct"),
    col("itemType") -> col("itemType"),
    col("language") -> col("language"),
    col("lastModifiedDate") -> col("lastModifiedDate"),
    col("loyaltyReward") -> col("isLoyaltyReward"),
    col("name") -> col("name"),
    col("nameSlug") -> col("nameSlug"),
    col("number") -> col("number"),
    col("nutrientTypes") -> col("nutrientTypes"),
    col("nutrientValues") -> col("nutrientValues"),
    col("orderScore") -> col("orderScore"),
    col("packagingCode") -> col("packagingCode"),
    col("packagingName") -> col("packagingName"),
    col("packshotUrl") -> col("packshotUrl"),
    col("portionSize") -> col("portionSize"),
    col("portionUnit") -> col("portionUnit"),
    col("preparation") -> col("preparation"),
    col("productCodes") -> col("productCodes"),
    col("productType") -> col("productType"),
    col("solutionCopy") -> col("solutionCopy"),
    col("subBrandCode") -> col("subBrandCode"),
    col("subBrandName") -> col("subBrandName"),
    col("subCategoryCode") -> col("subCategoryCode"),
    col("subCategoryName") -> col("subCategoryName"),
    col("topProduct") -> col("isTopProduct"),
    col("youtubeUrl") -> col("youtubeUrl")
  )

  val sifuCountries = List(AE,AR,AT,AU,AZ,BE,BG,BH,BR,CA,CH,CL,CN,CO,CR,CX,CZ,DE,DK,EE,
    EG,ES,FI,FR,GB,GR,GT,HK,HN,HR,HU,ID,IE,IL,IN,IT,JO,KR,KW,LB,LK,LT,LV,MM,MV,MX,MY,NL,
    NO,NZ,OM,PA,PH,PK,PL,PT,QA,RO,RU,SA,SE,SG,SI,SK,SV,TH,TR,TW,UA,US,UY,VN,ZA)

  val iteration = 10
}
