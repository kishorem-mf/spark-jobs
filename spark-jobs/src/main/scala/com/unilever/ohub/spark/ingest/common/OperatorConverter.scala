package com.unilever.ohub.spark.ingest.common

import java.sql.Timestamp

import com.unilever.ohub.spark.domain.entity
import com.unilever.ohub.spark.domain.entity.Operator
import com.unilever.ohub.spark.ingest.CustomParsers._
import com.unilever.ohub.spark.ingest.{DomainTransformer, OperatorEmptyParquetWriter}
import org.apache.spark.sql.Row
import org.apache.spark.sql.types.Decimal

object OperatorConverter extends CommonDomainGateKeeper[Operator] with OperatorEmptyParquetWriter {

  // scalastyle:off method.length
  override def toDomainEntity: DomainTransformer ⇒ Row ⇒ Operator = { transformer ⇒
    row ⇒
      import transformer._
      implicit val source: Row = row

      val ohubCreated = new Timestamp(System.currentTimeMillis())

      Operator(
        id = mandatory("id"),
        creationTimestamp = mandatory("creationTimestamp", toTimestamp),
        concatId = mandatory("concatId"),
        countryCode = mandatory("countryCode"),
        dateCreated = optional("dateCreated", parseDateTimeUnsafe()),
        dateUpdated = optional("dateUpdated", parseDateTimeUnsafe()),
        customerType = Operator.customerType,
        isActive = mandatory("isActive", toBoolean),
        isGoldenRecord = false,
        ohubId = Option.empty,
        name = optional("name"),
        sourceEntityId = mandatory("sourceEntityId"),
        sourceName = mandatory("sourceName"),
        ohubCreated = ohubCreated,
        ohubUpdated = ohubCreated,
        annualTurnover = optional("annualTurnover", toBigDecimal),
        averagePrice = optional("averagePrice", toBigDecimal),
        averageRating = optional("averageRating", toInt), //rating for 1 - 5
        beveragePurchasePotential = optional("beveragePurchasePotential", toBigDecimal),
        buildingSquareFootage = optional("buildingSquareFootage"),
        chainId = optional("chainId"),
        chainName = optional("chainName"),
        channel = optional("channel"),
        city = optional("city"),
        cookingConvenienceLevel = optional("cookingConvenienceLevel"),
        countryName = optional("countryName"),
        daysOpen = optional("daysOpen", toInt),
        distributorName = optional("distributorName"),
        distributorOperatorId = optional("distributorOperatorId"),
        emailAddress = optional("emailAddress"),
        faxNumber = optional("faxNumber"),
        hasDirectMailOptIn = optional("hasDirectMailOptIn", toBoolean),
        hasDirectMailOptOut = optional("hasDirectMailOptOut", toBoolean),
        hasEmailOptIn = optional("hasEmailOptIn", toBoolean),
        hasEmailOptOut = optional("hasEmailOptOut", toBoolean),
        hasFaxOptIn = optional("hasFaxOptIn", toBoolean),
        hasFaxOptOut = optional("hasFaxOptOut", toBoolean),
        hasGeneralOptOut = optional("hasGeneralOptOut", toBoolean),
        hasMobileOptIn = optional("hasMobileOptIn", toBoolean),
        hasMobileOptOut = optional("hasMobileOptOut", toBoolean),
        hasTelemarketingOptIn = optional("hasTelemarketingOptIn", toBoolean),
        hasTelemarketingOptOut = optional("hasTelemarketingOptOut", toBoolean),
        headQuarterAddress = optional("headQuarterAddress"),
        headQuarterCity = optional("headQuarterCity"),
        headQuarterPhoneNumber = optional("headQuarterPhoneNumber"),
        headQuarterState = optional("headQuarterState"),
        headQuarterZipCode = optional("headQuarterZipCode"),
        houseNumber = optional("houseNumber"),
        houseNumberExtension = optional("houseNumberExtension"),
        isNotRecalculatingOtm = optional("isNotRecalculatingOtm", toBoolean),
        isOpenOnFriday = optional("isOpenOnFriday", toBoolean),
        isOpenOnMonday = optional("isOpenOnMonday", toBoolean),
        isOpenOnSaturday = optional("isOpenOnSaturday", toBoolean),
        isOpenOnSunday = optional("isOpenOnSunday", toBoolean),
        isOpenOnThursday = optional("isOpenOnThursday", toBoolean),
        isOpenOnTuesday = optional("isOpenOnTuesday", toBoolean),
        isOpenOnWednesday = optional("isOpenOnWednesday", toBoolean),
        isPrivateHousehold = optional("isPrivateHousehold", toBoolean),
        kitchenType = optional("kitchenType"),
        menuKeywords = optional("menuKeywords"),
        mobileNumber = optional("mobileNumber"),
        netPromoterScore = optional("netPromoterScore", toBigDecimal),
        numberOfProductsFittingInMenu = optional("numberOfProductsFittingInMenu", toInt),
        numberOfReviews = optional("numberOfReviews", toInt),
        oldIntegrationId = optional("oldIntegrationId"),
        operatorLeadScore = optional("operatorLeadScore", toInt),
        otm = optional("otm"),
        otmEnteredBy = optional("otmEnteredBy"),
        phoneNumber = optional("phoneNumber"),
        potentialSalesValue = optional("potentialSalesValue", toBigDecimal),
        region = optional("region"),
        salesRepresentative = optional("salesRepresentative"),
        state = optional("state"),
        street = optional("street"),
        subChannel = optional("subChannel"),
        totalDishes = optional("totalDishes", toInt),
        totalLocations = optional("totalLocations", toInt),
        totalStaff = optional("totalStaff", toInt),
        vat = optional("vat"),
        wayOfServingAlcohol = optional("wayOfServingAlcohol"),
        website = optional("website"),
        webUpdaterId = None,
        weeksClosed = optional("weeksClosed", toInt),
        yearFounded = optional("yearFounded", toInt),
        zipCode = optional("zipCode"),
        localChannel = None,
        channelUsage = None,
        socialCommercial = None,
        strategicChannel = None,
        globalChannel = None,
        globalSubChannel = None,
        ufsClientNumber = optional("ufsClientNumber"),
        department = if(!optional("department").isDefined){Some("UFS")} else { optional("department")},
        //CRM fields
        crmId = optional("crmId"),
        distributionChannel = optional("distributionChannel"),
        division = optional("division"),
        salesOrgId = optional("salesOrgId"),
        parentSourceCustomerCode = optional("parentSourceCustomerCode"),
        closingTimeWorkingDay = optional("closingTimeWorkingDay"),
        openingTimeWorkingDay = optional("openingTimeWorkingDay"),
        preferredVisitDays = optional("preferredVisitDays"),
        preferredVisitStartTime = optional("preferredVisitStartTime"),
        preferredVisitEndTime = optional("preferredVisitEndTime"),
        preferredDeliveryDays = optional("preferredDeliveryDays"),
        preferredVisitWeekOfMonth = optional("preferredVisitWeekOfMonth"),
        name2 = optional("name2"),
        parentChannel = optional("parentChannel"),
        accountType = optional("accountType"),
        accountStatus = optional("accountStatus"),
        hasWebshopRegistration = optional("hasWebshopRegistration",toBoolean),
        hasLoyaltyManagementOptIn = optional("hasLoyaltyManagementOptIn",toBoolean),
        monthlyFoodSpend = optional("monthlyFoodSpend",toDecimal),
        latitude = optional("latitude"),
        longitude = optional("longitude"),
        customerHierarchyLevel3 = optional("customerHierarchyLevel3"),
        customerHierarchyLevel4 = optional("customerHierarchyLevel4"),
        customerHierarchyLevel5 = optional("customerHierarchyLevel5"),
        customerHierarchyLevel7 = optional("customerHierarchyLevel7"),
        mixedOrUfs = optional("mixedOrUfs"),
        salesGroupKey = optional("salesGroupKey"),
        salesOfficeKey = optional("salesOfficeKey"),
        industryKey = optional("industryKey"),
        salesDistrict = optional("salesDistrict"),
        customerGroup = optional("customerGroup"),
        languageKey = optional("languageKey"),
        sapCustomerId = optional("sapCustomerId"),
        recordType = optional("recordType"),
        isIndirectAccount = optional("isIndirectAccount",toBoolean),
        keyNumber = optional("keyNumber"),
        hasWebshopAccount = optional("hasWebshopAccount"),
        daysOpenPerWeek = optional("daysOpenPerWeek",toInt),
        hasOutsideSeatings = optional("hasOutsideSeatings",toBoolean),
        hasTakeAway = optional("hasTakeAway",toBoolean),
        hasHomeDelivery = optional("hasHomeDelivery",toBoolean),
        numberOfSeats = optional("numberOfSeats",toInt),
        numberOfBedsRange = optional("numberOfBedsRange"),
        numberOfRoomsRange = optional("numberOfRoomsRange"),
        numberOfStudentsRange = optional("numberOfStudentsRange"),
        totalStaffRange = optional("totalStaffRange"),
        hasFoodOnsite = optional("hasFoodOnsite",toBoolean),
        hasConference = optional("hasConference",toBoolean),
        twitterUrl = optional("twitterUrl"),
        facebookUrl = optional("facebookUrl"),
        instagramUrl = optional("instagramUrl"),
        numberOfChildSites = optional("numberOfChildSites",toInt),
        lastWebLoginDate = optional("lastWebLoginDate",parseDateTimeUnsafe()),
        lastOpenedNewsletterDate = optional("lastOpenedNewsletterDate",parseDateTimeUnsafe()),
        subcribedToUfsNewsletter = optional("subcribedToUfsNewsletter"),
        subcribedToIceCreamNewsletter = optional("subcribedToIceCreamNewsletter"),
        last3OnlineEvents = optional("last3OnlineEvents"),
        totalFacebookCampaignsClicked = optional("totalFacebookCampaignsClicked",toInt),
        livechatActivities = optional("livechatActivities"),
        totalLoyaltyRewardsBalancePoints = optional("totalLoyaltyRewardsBalancePoints",toInt),
        loyaltyRewardsBalanceUpdatedDate = optional("loyaltyRewardsBalanceUpdatedDate",parseDateTimeUnsafe()),
        accountSubType = optional("accountSubType"),
        visitorsPerYear = optional("visitorsPerYear"),
        unileverNowClassification = optional("unileverNowClassification"),
        tradingStatus = optional("tradingStatus"),
        hasTelephoneSuppressed = optional("hasTelephoneSuppressed",toBoolean),
        caterlystPotentialTurnover = optional("caterlystPotentialTurnover",toDecimal),
        salesRepEstimatedPotentialTurnover = optional("salesRepEstimatedPotentialTurnover",toDecimal),
        preferredCommunicationMethod = optional("preferredCommunicationMethod"),
        hasPermittedToShareSsd = optional("hasPermittedToShareSsd",toBoolean),
        isOkWithVisits = optional("isOkWithVisits",toBoolean),
        customerFlag = optional("customerFlag"),
        mergeWith = optional("mergeWith"),
        hasToBeMerged = optional("hasToBeMerged",toBoolean),
        specialPrice = optional("specialPrice"),
        categoryAttributes = optional("categoryAttributes"),
        accountOwner = optional("accountOwner"),
        numberOfTillPoints = optional("numberOfTillPoints"),
        keyDecisionMaker = optional("keyDecisionMaker"),
        seasonCloseTime = optional("seasonCloseTime"),
        poNumber = optional("poNumber"),
        otmOohCalculated = optional("otmOohCalculated"),
        otmUfsCalculated = optional("otmUfsCalculated"),
        eOtm = optional("eOtm"),
        relativeLeadScore = optional("relativeLeadScore",toInt),
        hasPermittedToOrder = optional("hasPermittedToOrder",toBoolean),
        ofsValue = optional("ofsValue"),
        routeToMarketIceCreamCategory = optional("routeToMarketIceCreamCategory"),
        additionalTags = optional("additionalTags"),
        advertisementId = optional("advertisementId"),
        deviceId = optional("deviceId"),
        googlePlacesId = optional("googlePlacesId"),
        internationalMapCode = optional("internationalMapCode"),
        ipAddress = optional("ipAddress"),
        nationalMapCode = optional("nationalMapCode"),
        //other fields
        additionalFields = additionalFields,
        ingestionErrors = errors
      )
  }
}
